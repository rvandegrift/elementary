enum Elm.Sys_Notify.Server
{
   none = 0, [[No notificationserver (disables notifications)]]
   dbus = 1 << 0 [[Use DBus as a notification server]]
}

enum Elm.Sys_Notify.Closed_Reason
{
   [[The reason the notification was closed

     @since 1.8
   ]]

   legacy: elm_sys_notify_closed;

   expired, [[The notification expired]]
   dismissed, [[The notification was dismissed by the user]]
   requested, [[The notification was closed by a call to CloseNotification method]]
   undefined [[Undefined/reserved reasons]]
}

struct Elm.Sys_Notify.Notification_Closed
{
   [[Data on event when notification closed is emitted

     @since 1.8
   ]]
   id: uint; [[ID of the notification]]
   reason: Elm.Sys_Notify.Closed_Reason; [[The reason the notification was closed]]
}

struct Elm.Sys_Notify.Action_Invoked
{
   [[Data on event when the action invoked is emitted

     @since 1.8
   ]]
   id: uint; [[ID of the notification]]
   action_key: char *; [[The key of the action invoked. These match the
                                keys sent over in the list of actions]]
}

class Elm.Sys_Notify (Eo.Base, Elm.Sys_Notify_Interface)
{
   legacy_prefix: elm_sys_notify;
   eo_prefix: elm_obj_sys_notify;

   methods {
      @property servers {
         get {
            [[Get the notification servers that have been registered

              @since 1.17
            ]]
         }
         set {
            [[Set the notifications server to be used.

              Note: This is an advanced function that should be used only to
                    fullfill very specific purposes. Use elm_need_sys_notify()
                    which activates the default available notification
                    servers.

              @since 1.17
            ]]
            return: bool; [[$true on success, $false on failure]]
         }
         values {
            servers: Elm.Sys_Notify.Server; [[Binary mask of servers to enable.
            If a server is not present in the binary mask but was previously
            registered, it will be unregistered.]]
         }
      }

      singleton_get @class {
         [[Returns the singleton instance of the notification manager
         Elm.Sys_Notify. It is initialized upon the first call of this
         function

           @since 1.17
         ]]
         return: Elm.Sys_Notify *; [[The unique notification manager]]
      }
   }

   implements {
      class.constructor;
      Eo.Base.constructor;
      Eo.Base.destructor;
      Elm.Sys_Notify_Interface.send;
      Elm.Sys_Notify_Interface.simple_send;
      Elm.Sys_Notify_Interface.close;
   }
}

